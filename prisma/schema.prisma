generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model message {
  id         Int      @id @default(autoincrement())
  titre      String?
  content    String
  idChatroom Int
  createdAt  DateTime @default(now())
  chatroom   chatroom @relation(fields: [idChatroom], references: [id], map: "Message_idChatroom_fkey")

  @@index([idChatroom], map: "Message_idChatroom_fkey")
}

model question {
  id       Int        @id @default(autoincrement())
  contenu  String
  parentId Int?
  parent   question?  @relation("SubQuestions", fields: [parentId], references: [id])
  children question[] @relation("SubQuestions")
  reponse  reponse?

  // plus de reponses[]
  @@index([parentId], map: "question_parentId_fkey")
}

model reponse {
  id         Int      @id @default(autoincrement())
  contenu    String
  questionId Int      @unique
  question   question @relation(fields: [questionId], references: [id])

  @@index([questionId])
}

model account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              user    @relation(fields: [userId], references: [id], map: "Account_userId_fkey")

  @@unique([provider, providerAccountId], map: "Account_provider_providerAccountId_key")
  @@index([userId], map: "Account_userId_fkey")
}

model chatroom {
  id     Int     @id @default(autoincrement())
  titre  String?
  status String
  idUser Int

  createdAt DateTime  @default(now())
  user      user      @relation(fields: [idUser], references: [id], map: "Chatroom_idUser_fkey")
  message   message[]

  @@index([idUser], map: "Chatroom_idUser_fkey")
}

model session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique(map: "Session_sessionToken_key")
  userId       Int
  expires      DateTime
  user         user     @relation(fields: [userId], references: [id], map: "Session_userId_fkey")

  @@index([userId], map: "Session_userId_fkey")
}

model user {
  id            Int        @id @default(autoincrement())
  name          String?
  email         String?    @unique(map: "User_email_key")
  password      String?
  emailVerified DateTime?
  image         String?
  account       account[]
  chatroom      chatroom[]
  session       session[]
  role          role?      @relation(fields: [roleId], references: [id])
  roleId        Int?
}

model role {
  id    Int    @id @default(autoincrement())
  name  String @unique // "admin" ou "user"
  users user[]
}

model verificationtoken {
  identifier String
  token      String   @unique(map: "VerificationToken_token_key")
  expires    DateTime

  @@unique([identifier, token], map: "VerificationToken_identifier_token_key")
}
