generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum QuestionStatus {
  provisional
  approved
  rejected
}

enum AuthorType {
  user
  ai
  system
  admin
}

enum TicketStatus {
  open
  processed
  pending
}

enum RoleName {
  user
  admin
  superAdmin
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique(map: "User_email_key")
  password      String?
  emailVerified DateTime?
  image         String?

  accounts     OAuthAccount[]
  chatSessions ChatSession[]
  sessions     UserSession[]
  tickets      Ticket[]
  role         Role?          @relation(fields: [roleId], references: [id])
  roleId       Int?

  Question Question[]
}

model Role {
  id    Int      @id @default(autoincrement())
  name  RoleName @unique
  users User[]
}

model ChatSession {
  id        Int       @id @default(autoincrement())
  title     String?
  userId    Int
  user      User      @relation(fields: [userId], references: [id], map: "Chatroom_idUser_fkey")
  messages  Message[]
  createdAt DateTime  @default(now())

  @@index([userId])
}

model FaqGroup {
  id        Int        @id @default(autoincrement())
  title     String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  questions Question[]
}

model Question {
  id      Int    @id @default(autoincrement())
  content String // Texte de la question

  // üß≠ Hi√©rarchie : une question peut avoir une question parente (ex : sous-question)
  parentId Int?
  parent   Question?  @relation("SubQuestions", fields: [parentId], references: [id])
  children Question[] @relation("SubQuestions") // Toutes les sous-questions li√©es

  // üî¢ Ordre des sous-questions (dans une FAQ par exemple)
  order Int @default(0)

  // üì¶ Statut de la question : provisoire, approuv√©e, rejet√©e
  status QuestionStatus @default(provisional)

  // üîó Lien vers l‚Äôutilisateur qui a pos√© la question
  userId Int?
  user   User? @relation(fields: [userId], references: [id])

  // üîó Lien vers la FAQ √† laquelle cette question appartient
  faqGroupId Int?
  faqGroup   FaqGroup? @relation(fields: [faqGroupId], references: [id])

  // üîó R√©ponse unique √† cette question
  answer Answer?

  createdAt DateTime  @default(now())
  Message   Message[]

  @@index([createdAt])
}

model Answer {
  id         Int      @id @default(autoincrement())
  content    String
  questionId Int      @unique
  question   Question @relation(fields: [questionId], references: [id])

  @@index([questionId])
}

model Ticket {
  id        Int          @id @default(autoincrement())
  content   String
  status    TicketStatus @default(open)
  userId    Int
  user      User         @relation(fields: [userId], references: [id])
  createdAt DateTime     @default(now())
}

model OAuthAccount {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], map: "Account_userId_fkey")

  @@unique([provider, providerAccountId], map: "Account_provider_providerAccountId_key")
  @@index([userId], map: "Account_userId_fkey")
}

model UserSession {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique(map: "Session_sessionToken_key")
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], map: "Session_userId_fkey")

  @@index([userId], map: "Session_userId_fkey")
}

model Message {
  id            Int         @id @default(autoincrement())
  content       String
  authorType    AuthorType  @default(user)
  chatSessionId Int
  chatSession   ChatSession @relation(fields: [chatSessionId], references: [id], map: "Message_idChatroom_fkey")
  createdAt     DateTime    @default(now())
  questionId    Int? // ‚úÖ cl√© √©trang√®re vers Question (optionnelle)
  question      Question?   @relation(fields: [questionId], references: [id])

  @@index([chatSessionId])
  @@index([questionId])
}

model VerificationToken {
  identifier String
  token      String   @unique(map: "VerificationToken_token_key")
  expires    DateTime

  @@unique([identifier, token], map: "VerificationToken_identifier_token_key")
}

/**
 * 1- üß†User
 * Repr√©sente un utilisateur de la plateforme
 * Relation :
 * Question[]: les questions pos√©es par l‚Äôutilisateur
 * ChatSession[]: les sessions de chat initi√©es
 * Ticket[]: les tickets de support envoy√©s
 * Role: r√¥le attribu√© √† l‚Äôutilisateur (user, admin, etc.)
 * 2- üîê Role
 * Repr√©sente le r√¥le d‚Äôun utilisateur
 * name peut √™tre user, admin, superAdmin
 * Relation :
 * users: tous les utilisateurs ayant ce r√¥le
 * 3- üí¨ ChatSession
 * Une session de discussion (type ChatGPT)
 * Relation :
 * user: utilisateur propri√©taire
 * messages: tous les messages de cette session
 * 4- üì• Message
 * Un message individuel dans une session de chat
 * Relation :
 * chatSession: session dans laquelle ce message a √©t√© post√©
 * Question: question associ√©e √† ce message (ex: si une FAQ a √©t√© cliqu√©e)
 * 5- üìö FaqGroup
 * Groupe de questions (FAQ)
 * title: titre g√©n√©ral (ex: "Cr√©ation de compte")
 * questions: toutes les questions li√©es
 * 6- ‚ùì Question
 * Question pos√©e par un utilisateur ou dans une FAQ
 * Relations :
 * faqGroup: FAQ √† laquelle appartient cette question
 * user: utilisateur qui a pos√© la question (facultatif)
 * answer: r√©ponse √† cette question (1 seule r√©ponse)
 * message: message de chat auquel est associ√©e cette question (si elle provient du chat)
 * parent: question parente (si c‚Äôest une sous-question)
 * children: sous-questions
 * 7- üí° Answer
 * R√©ponse √† une question
 * Un seul Answer par Question
 * Relation :
 * question: la question li√©e √† cette r√©ponse
 * 8- üéüÔ∏è Ticket
 * Demande envoy√©e par un utilisateur au support
 * Relation :
 * user: √©metteur du ticket
 * 9- üîê OAuthAccount, UserSession, VerificationToken
 * Composants d‚Äôauthentification (authentification tierce, sessions, tokens de v√©rification)
 */
